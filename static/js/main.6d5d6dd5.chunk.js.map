{"version":3,"sources":["App.js","Redux/action.js","serviceWorker.js","Redux/reducer.js","index.js"],"names":["App","props","submitData","state","taskName","taskLabel","id","newTask","Math","floor","random","addTask","updatedDetails","editTask","alert","clearData","editDetails","data","setState","deleteTask","window","confirm","handleNameChange","e","target","value","handleLabelChange","taskDescription","this","getTask","className","onChange","type","placeholder","onClick","tasks","map","index","key","Component","connect","dispatch","payload","taskId","Boolean","location","hostname","match","initialstate","reducer","action","concat","content","i","filter","item","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6d5d6dd5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport PropTypes from 'prop-types';\nimport { getTask, addTask, editTask, deleteTask } from './Redux/action';\nimport { connect } from 'react-redux';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: 0,\n      taskName: \"\",\n      taskDescription: \"\"\n    };\n  }\n\n  static propTypes = {\n    tasks: PropTypes.array.isRequired,\n    getTask: PropTypes.func.isRequired,\n    addTask: PropTypes.func.isRequired,\n    editTask: PropTypes.func.isRequired,\n    deleteTask: PropTypes.func.isRequired\n  };\n\n  componentDidMount() {\n    this.props.getTask();\n  }\n\n  submitData = () => {\n    if (this.state.taskName && this.state.taskLabel && !this.state.id) {\n      const newTask = {\n        id: Math.floor(Math.random() * (999 - 100 + 1) + 100),\n        taskName: this.state.taskName,\n        taskLabel: this.state.taskLabel,\n      };\n\n      this.props.addTask(newTask);\n    } else if (this.state.taskName && this.state.taskLabel && this.state.id) {\n      const updatedDetails = {\n        id: this.state.id,\n        taskName: this.state.taskName,\n        taskLabel: this.state.taskLabel,\n      };\n\n      this.props.editTask(updatedDetails);\n    } else {\n      alert('Enter Task Details.');\n    }\n\n    this.clearData();\n  }\n\n  editDetails = (data) => {\n    this.setState({\n      id: data.id,\n      taskName: data.taskName,\n      taskLabel: data.taskLabel\n    })\n  }\n\n  deleteTask = (id) => {\n    this.clearData();\n    if (window.confirm(\"delete the task?\")) {\n      this.props.deleteTask(id);\n    }\n  }\n\n  handleNameChange = (e) => {\n    this.setState({\n      taskName: e.target.value\n    });\n  }\n\n  handleLabelChange = (e) => {\n    this.setState({\n      taskLabel: e.target.value\n    });\n  }\n\n  clearData = () => {\n    this.setState({\n      id: 0,\n      taskName: \"\",\n      taskLabel: \"\"\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Todo Application</h1>\n        </header>\n        <p className=\"App-intro\">\n          <div className=\"leftsection\">\n            Task Name : <input onChange={this.handleNameChange} value={this.state.taskName} type=\"text\" placeholder=\"Task Name\" /> <br />\n            Task Label :  <input onChange={this.handleLabelChange} value={this.state.taskLabel} type=\"text\" placeholder=\"Task Description\" /><br />\n            {this.state.id ? <button onClick={this.submitData}>UPDATE TASK</button> : <button onClick={this.submitData}>ADD TASK</button>}   <button onClick={this.clearData}>CLEAR TASK</button>\n          </div>\n          <div className=\"rightsection\">\n            <table>\n              <thead>\n                <tr>\n                  <th>ID</th>\n                  <th>Tasks</th>\n                  <th>Description</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.props.tasks && this.props.tasks.map((data, index) => {\n                  return <tr key={(index + 1)}>\n                    <td>{(index + 1)}</td>\n                    <td>{data.taskName}</td>\n                    <td>{data.taskLabel}</td>\n                    <td><button onClick={() => this.editDetails(data)}>EDIT TASK</button> <button onClick={() => this.deleteTask(data.id)}>DELETE TASK</button> </td>\n                  </tr>\n                })}\n              </tbody>\n            </table>\n          </div>\n        </p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  tasks: state.tasks\n});\n\nexport default connect(mapStateToProps, { getTask, addTask, editTask, deleteTask })(App);\n","export function getTask() {\r\n    return dispatch => {\r\n        return dispatch({\r\n            type: 'GET_TASK'\r\n        });\r\n    }\r\n};\r\n\r\nexport function addTask(data) {\r\n    return dispatch => {\r\n        return dispatch({\r\n            type: 'ADD_TASK',\r\n            payload: data\r\n        });\r\n    }\r\n};\r\n\r\nexport function editTask(data) {\r\n    return dispatch => {\r\n        return dispatch({\r\n            type: 'EDIT_TASK',\r\n            payload: data\r\n        });\r\n    }\r\n};\r\n\r\nexport function deleteTask(taskId) {\r\n    return dispatch => {\r\n        return dispatch({\r\n            type: 'DELETE_TASK',\r\n            payload: taskId\r\n        });\r\n    }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialstate = {\r\n    tasks: [\r\n        { id: 1, taskName: \"Sleep\", taskLabel: \"High Priority\" }\r\n\r\n    ]\r\n};\r\n\r\nconst reducer = (state = initialstate, action) => {\r\n    switch (action.type) {\r\n        case 'GET_TASK':\r\n            return {\r\n                ...state\r\n            };\r\n        case 'ADD_TASK':\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.concat(action.payload)\r\n            };\r\n        case 'EDIT_TASK':\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(\r\n                    (content, i) => content.id === action.payload.id ? {...content, taskName : action.payload.taskName ,  taskLabel : action.payload.taskLabel }\r\n                                            : content)\r\n            };\r\n        case 'DELETE_TASK':\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(item => item.id !== action.payload)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';  \nimport ReactDOM from 'react-dom';  \nimport App from './App';  \nimport { Provider } from 'react-redux';  \nimport { createStore, applyMiddleware } from 'redux';  \nimport thunk from \"redux-thunk\";  \nimport * as serviceWorker from './serviceWorker';  \nimport reducer from './Redux/reducer';  \n  \nconst store = createStore(reducer, applyMiddleware(thunk));  \n  \nReactDOM.render(  \n    <Provider store={store}>  \n        <App />  \n    </Provider>, document.getElementById('root'));  \n  \n// If you want your app to work offline and load faster, you can change    \n// unregister() to register() below. Note this comes with some pitfalls.    \n// Learn more about service workers: http://bit.ly/CRA-PWA    \nserviceWorker.unregister();   "],"sourceRoot":""}